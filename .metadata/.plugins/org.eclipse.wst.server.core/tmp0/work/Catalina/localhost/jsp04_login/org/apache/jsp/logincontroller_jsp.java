/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.49
 * Generated at: 2020-01-11 09:23:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.json.simple.JSONObject;
import java.io.PrintWriter;
import java.util.List;
import com.login.dto.MYMEMBER;
import com.login.biz.MyMemberBizImpl;
import com.login.biz.MyMemberBiz;

public final class logincontroller_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("com.login.biz.MyMemberBiz");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.login.biz.MyMemberBizImpl");
    _jspx_imports_classes.add("org.json.simple.JSONObject");
    _jspx_imports_classes.add("com.login.dto.MYMEMBER");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");

      out.write('\r');
      out.write('\n');

	response.setContentType("text/html; charset=UTF-8");

      out.write("\r\n");
      out.write("\r\n");
      out.write("\t");

		MyMemberBiz biz = new MyMemberBizImpl();

		String command = request.getParameter("command");
		System.out.println("<" + command + ">");

		if (command.equals("login")) {

			String MYID = request.getParameter("MYID");
			String MYPW = request.getParameter("MYPW");

			MYMEMBER mymember = biz.login(MYID, MYPW);

			if (mymember != null) {
				// session : 만료되지 전까지 어플레케이션 전체에서 사용 가능!	
				session.setAttribute("mymember", mymember);
				session.setMaxInactiveInterval(10 * 60);
				// setMaxInactiveInterval(second) : 해당 초 만큼 활동이 없으면 session invalidate 한다.
				// (defalut : 30분 / 음수 : 무제한)

				if (mymember.getMYROLE().equals("ADMIN")) {
					response.sendRedirect("adminmain.jsp");
				} else if (mymember.getMYROLE().equals("USER")){
					response.sendRedirect("usermain.jsp");
				}
			} else {
	
      out.write("\r\n");
      out.write("\t\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\talert(\"id와 pw를 다시한번 확인해 주세요!\");\r\n");
      out.write("\t\t\t\tlocation.href=\"index.jsp\";\r\n");
      out.write("\t\t\t</script>\r\n");
      out.write("\t");

			}

		} else if (command.equals("logout")) {

			session.invalidate();
			response.sendRedirect("index.jsp");

		} else if (command.equals("selectAll")) {

			List<MYMEMBER> list = biz.selectList();
			request.setAttribute("list", list);
			pageContext.forward("userselectlist.jsp");

		} else if (command.equals("selectEnabled")) {

			List<MYMEMBER> list = biz.selectEnabled();
			request.setAttribute("list", list);
			pageContext.forward("userselectenabled.jsp");

		} else if (command.equals("updateroleform")) {

			int MYNO = Integer.parseInt(request.getParameter("MYNO"));

			MYMEMBER mymember = biz.selectUser(MYNO);
			request.setAttribute("select", mymember);

			pageContext.forward("updaterole.jsp");

		} else if (command.equals("updateroleres")) {

			int MYNO = Integer.parseInt(request.getParameter("MYNO"));
			String MYROLE = request.getParameter("MYROLE");

			int res = biz.updateRole(MYNO, MYROLE);

			if (res > 0) {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\t\talert(\"회원 등급 변경 성공!\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"logincontroller.jsp?command=selectEnabled\";\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("\t");

			} else {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\t\talert(\"회원 등급 변경 실패\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"logincontroller.jsp?command=updateroleform&MYNO=");
      out.print(MYNO);
      out.write("\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

		}

		} else if (command.equals("registform")) {

			response.sendRedirect("registform.jsp");

		} else if (command.equals("registres")) {

			MYMEMBER mymember = new MYMEMBER();
			mymember.setMYID(request.getParameter("MYID"));
			mymember.setMYPW(request.getParameter("MYPW"));
			mymember.setMYNAME(request.getParameter("MYNAME"));
			mymember.setMYADDR(request.getParameter("MYADDR"));
			mymember.setMYPHONE(request.getParameter("MYPHONE"));
			mymember.setMYEMAIL(request.getParameter("MYEMAIL"));
			
			int res = biz.insertUser(mymember);
			
			if(res > 0){
				
      out.write("\r\n");
      out.write("\t\t\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\t\talert(\"회원 가입 성공!\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"index.jsp\";\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t");

			}else{
				
      out.write("\r\n");
      out.write("\t\t\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\t\talert(\"회원 가입 실패!\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"index.jsp\";\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t");

			}
		} else if (command.equals("idchk")) {

			String id = request.getParameter("id");
			MYMEMBER mymember = biz.idChk(id);

			boolean idnotused = true;
			if (mymember != null) {
				idnotused = false;
			}
			
			response.sendRedirect("idChk.jsp?idnotused=" + idnotused);
			
		} else if (command.equals("ajaxIdChk")){
			
			
			
			
			JSONObject json = new JSONObject();
			String id = request.getParameter("MYID");
			
			MYMEMBER mymember = biz.idChk(id);
			boolean idnotused = true;
			if (mymember != null) {
				idnotused = false;
			}						
			
			json.put("idnotused", idnotused);
			
			PrintWriter pout = response.getWriter();
			pout.print(json.toString());
			
			
			
			
						
		} else if(command.equals("usersData")){
			
			int MYNO = Integer.parseInt(request.getParameter("MYNO"));
			MYMEMBER mymember = biz.selectUser(MYNO);

			request.setAttribute("mymember", mymember);
			pageContext.forward("usersData.jsp");
			
		} else if(command.equals("updateUsersData")){
			
			int MYNO = Integer.parseInt(request.getParameter("MYNO"));
			MYMEMBER mymember = biz.selectUser(MYNO);
			
			request.setAttribute("mymember", mymember);
			pageContext.forward("updateUsersData.jsp");
			
		} else if(command.equals("updateUsersRes")){
			
			MYMEMBER mymember = new MYMEMBER();

			mymember.setMYNO(Integer.parseInt(request.getParameter("MYNO")));
			mymember.setMYID(request.getParameter("MYID"));
			mymember.setMYPW(request.getParameter("MYPW"));
			mymember.setMYNAME(request.getParameter("MYNAME"));
			mymember.setMYADDR(request.getParameter("MYADDR"));
			mymember.setMYPHONE(request.getParameter("MYPHONE"));
			mymember.setMYEMAIL(request.getParameter("MYEMAIL"));
			
			int res = biz.updateUser(mymember);
			
			if(res > 0){
				
      out.write("\r\n");
      out.write("\t\t\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\t\talert(\"수정 성공!!\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"logincontroller.jsp?command=usersData&MYNO=");
      out.print(mymember.getMYNO());
      out.write("\";\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t");

			}else{
				
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\t\talert(\"수정 실패 ㅜㅜㅜ!!\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"logincontroller.jsp?command=usersData&MYNO=");
      out.print(mymember.getMYNO());
      out.write("\";\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t");

			}
			
		} else if (command.equals("delete")){
			
			int MYNO = Integer.parseInt(request.getParameter("MYNO"));
			
			int res = biz.deleteUser(MYNO);
			
			if(res > 0){
				
      out.write("\r\n");
      out.write("\t\t\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\t\talert(\"탈퇴 성공!!\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"index.jsp\";\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t");

			}else{
				
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t\t\talert(\"탈퇴 실패 ㅜㅜㅜ!!\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"logincontroller.jsp?command=usersData&MYNO=");
      out.print(MYNO);
      out.write("\";\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t");

			}
		}
	
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
