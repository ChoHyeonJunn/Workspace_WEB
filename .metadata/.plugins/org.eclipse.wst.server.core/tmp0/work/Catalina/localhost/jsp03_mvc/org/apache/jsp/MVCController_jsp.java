/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.49
 * Generated at: 2020-01-14 06:43:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.mvc.dto.MVCDto;
import java.util.List;
import com.mvc.biz.MVCBizImpl;
import com.mvc.biz.MVCBiz;

public final class MVCController_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.mvc.biz.MVCBiz");
    _jspx_imports_classes.add("com.mvc.dto.MVCDto");
    _jspx_imports_classes.add("com.mvc.biz.MVCBizImpl");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");

      out.write('\r');
      out.write('\n');

	response.setContentType("text/html; charset=UTF-8");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");

		MVCBiz mvcbiz = new MVCBizImpl();

		int SEQ = 0;
		String WRITER = "";
		String TITLE = "";
		String CONTENT = "";
		int res = 0;

		String command = request.getParameter("command");
		System.out.println("<" + command + ">");

		switch (command) {

			case "list" :
				List<MVCDto> list = mvcbiz.selectList();
				request.setAttribute("list", list);
				pageContext.forward("boardlist.jsp");
				break;
			case "detail" :
				MVCDto detailDto = mvcbiz.selectOne(Integer.parseInt(request.getParameter("SEQ")));
				request.setAttribute("dto", detailDto);
				pageContext.forward("detail.jsp");
				break;
			case "writeform" :
				response.sendRedirect("boardwrite.jsp"); //단순화면전환에 많이 쓴다.
				break;
			case "writeres" :
				WRITER = request.getParameter("WRITER");
				TITLE = request.getParameter("TITLE");
				CONTENT = request.getParameter("CONTENT");

				MVCDto insertDto = new MVCDto();
				insertDto.setWRITER(WRITER);
				insertDto.setTITLE(TITLE);
				insertDto.setCONTENT(CONTENT);

				res = mvcbiz.insert(insertDto);

				if (res > 0) {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\talert(\"새로운 글 등록 완료하였습니다.\");\r\n");
      out.write("\t\tlocation.href = \"MVCController.jsp?command=list\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

		} else {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\talert(\"새로운 글 등록에 실패하였습니다.\");\r\n");
      out.write("\t\tlocation.href = \"MVCController.jsp?command=writeform\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

		}
				break;
			case "updateform" :
				SEQ = Integer.parseInt(request.getParameter("SEQ"));
				MVCDto updateDto = mvcbiz.selectOne(SEQ);

				request.setAttribute("dto", updateDto);
				pageContext.forward("update.jsp");
				break;
			case "updateres" :
				SEQ = Integer.parseInt(request.getParameter("SEQ"));
				WRITER = request.getParameter("WRITER");
				TITLE = request.getParameter("TITLE");
				CONTENT = request.getParameter("CONTENT");

				MVCDto updateDto2 = new MVCDto();
				updateDto2.setSEQ(SEQ);
				updateDto2.setWRITER(WRITER);
				updateDto2.setTITLE(TITLE);
				updateDto2.setCONTENT(CONTENT);

				res = mvcbiz.update(updateDto2);
				if (res > 0) {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\talert(\"글 수정 성공!\");\r\n");
      out.write("\t\tlocation.href=\"MVCController.jsp?command=detail&SEQ=");
      out.print(SEQ);
      out.write("\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

		} else {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\talert(\"글 수정 실패\");\r\n");
      out.write("\t\tlocation.href=\"MVCController.jsp?command=updateform&SEQ=");
      out.print(SEQ);
      out.write("\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

		}
				break;
			case "delete" :
				SEQ = Integer.parseInt(request.getParameter("SEQ"));
				res = mvcbiz.delete(SEQ);
				if (res > 0) {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\talert(\"글 삭제 성공!\");\r\n");
      out.write("\t\tlocation.href=\"MVCController.jsp?command=list\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

		} else {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\talert(\"글 삭제 실패\");\r\n");
      out.write("\t\tlocation.href=\"MVCController.jsp?command=detail&SEQ=");
      out.print(SEQ);
      out.write("\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

		}
				break;
			case "muldel" :
				String[] seqList = request.getParameterValues("chk");
				
				if (seqList == null || seqList.length == 0) {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\talert(\"삭제할 글을 1개 이상 선택해 주세요!\");\r\n");
      out.write("\t\tlocation.href = \"MVCController.jsp?command=list\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

				} else {
					boolean mulbool = mvcbiz.multiDelete(seqList);

					if (mulbool) {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\talert(\"muldel 성공!\");\r\n");
      out.write("\t\tlocation.href = \"MVCController.jsp?command=list\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

					} else {
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\talert(\"muldel 실패!\");\r\n");
      out.write("\t\tlocation.href = \"MVCController.jsp?command=list\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

					}
				}

			break;
		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<h1>잘못왔다,,,</h1>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
